import com.github.spotbugs.snom.Confidence
import com.github.spotbugs.snom.Effort
import com.github.spotbugs.snom.SpotBugsReport
import com.github.spotbugs.snom.SpotBugsTask

plugins {
    id 'java-library'
    id 'maven-publish'
    id 'checkstyle'
    id 'com.github.spotbugs' version '6.4.4'
    id 'com.github.ben-manes.versions' version '0.53.0'
}

ext {
    minOpenfireVersion = '4.7.0'
    pluginName = 'Password Reset'
    pluginDescription = 'Provides the ability for users to reset their own passwords if they have forgotten them.'
}

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(11))
    }
    withJavadocJar()
    withSourcesJar()
}

apply from: 'build.openfire-plugin.gradle'

test {
    useJUnitPlatform()
    testLogging {
        showStandardStreams = true
    }
}

checkstyle {
    toolVersion = '10.21.1'
    maxWarnings = 0
}

tasks.withType(Checkstyle).configureEach {
    reports {
        xml.required = false
        html.required = true
    }
    exclude '**/org/jivesoftware/openfire/plugin/passwordreset/jsp/**'
}

spotbugs {
    effort = Effort.MAX
    reportLevel = Confidence.values()[0] // LOW - See also https://github.com/spotbugs/spotbugs-gradle-plugin/issues/972
    ignoreFailures.set false
    extraArgs.add "-longBugCodes"
}

//noinspection ConfigurationAvoidance - as this registers a new task, we can't use .forEach
tasks.withType(SpotBugsTask) {
    reports(({
        text.enabled = true
        xml.enabled = false
    } as Closure<NamedDomainObjectContainer<? extends SpotBugsReport>>))

    //noinspection GroovyAssignabilityCheck
    tasks.register("${it.name}Report") {
        def input = reports.named("text").get().outputLocation.asFile.get()
        inputs.file input
        doLast {
            input.readLines().forEach {
                println(it)
            }
        }
    }
    it.finalizedBy "${it.name}Report"
}

spotbugsMain {
    classes = classes.filter {
        !it.path.contains(new File('/org/jivesoftware/openfire/plugin/passwordreset/jsp/').path)
    }
}

dependencies {

    def lombok = 'org.projectlombok:lombok:1.18.42'

    annotationProcessor lombok

    compileOnly lombok

    implementation 'com.github.spotbugs:spotbugs-annotations:4.9.6'
    implementation 'com.github.bbottema:emailaddress-rfc2822:2.3.1'

    testAnnotationProcessor lombok

    testCompileOnly lombok

    testImplementation platform('org.junit:junit-bom:5.14.0')
    testImplementation 'org.junit.jupiter:junit-jupiter-api'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.20.0'
    testImplementation 'org.assertj:assertj-core:3.27.6'

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
}

dependencyUpdates.gradleReleaseChannel="current"

// See https://github.com/jeremylong/DependencyCheck/issues/2764#issuecomment-680680558 flr an expla nation
dependencies {
    components {
        withModule('org.dom4j:dom4j', ClearDependencies)
    }
}

class ClearDependencies implements ComponentMetadataRule {
    void execute(ComponentMetadataContext context) {
        context.details.allVariants { withDependencies { clear() } }
    }
}